/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "http.go"

#include <stdlib.h>
#include <string.h>

typedef struct {
    char* method;
    char* path;
    char* body;
    char* client_ip;
    char* headers;
    char* content_type;
} HttpRequest;

typedef struct {
    char* body;
    char* content_type;
    int status_code;
    char* headers;
} HttpResponse;

static HttpResponse* create_http_response() {
    HttpResponse* res = (HttpResponse*)malloc(sizeof(HttpResponse));
    memset(res, 0, sizeof(HttpResponse));
    return res;
}

static void free_http_response(HttpResponse* res) {
    if (res == NULL) return;
    free(res->body);
    free(res->content_type);
    free(res->headers);
    free(res);
}

typedef HttpResponse* (*HttpHandler)(HttpRequest* req);

static HttpResponse* call_handler(HttpHandler handler, HttpRequest* req) {
    return handler(req);
}

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern char* GetFormValue(HttpRequest* req, char* key);
extern char* GetHeaderValue(HttpRequest* req, char* headerName);
extern void RegisterHandler(char* path, HttpHandler handler);
extern char* GetAuthToken(HttpRequest* req);

// Función adicional para obtener solo el Bearer token (más específica)
extern char* GetBearerToken(HttpRequest* req);
extern void StartServer(char* port);
extern int AddToWhitelist(char* ip);
extern int RemoveFromWhitelist(char* ip);
extern int AddToBlacklist(char* ip);
extern int RemoveFromBlacklist(char* ip);
extern int IsWhitelisted(char* ip);
extern int IsBlacklisted(char* ip);
extern void StartServerWithIPFilter(char* port, int enableFilter);

// Función auxiliar para cargar listas desde strings separados por comas
extern void LoadWhitelist(char* ips);
extern void LoadBlacklist(char* ips);

#ifdef __cplusplus
}
#endif
