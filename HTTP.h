/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "HTTP.go"

#include <stdlib.h>
#include <string.h>

// Estructura para tokens
typedef struct {
    char* token;
    time_t expiration;
} TokenInfo;

typedef struct {
    const char* method;
    const char* path;
    const char* body;
    const char* client_ip;
    const char* headers;
    const char* username;
    const char* password;
    const char* bearer_token;
} HttpRequest;

typedef struct {
    int status_code;
    const char* body;
} HttpResponse;

typedef HttpRequest* Request;
typedef HttpResponse* Response;

typedef Response (*HttpHandler)(Request req);

static inline Response call_handler(HttpHandler handler, Request req) {
    return handler(req);
}

static inline Response create_response_with_params(int status_code, const char* body) {
    Response res = (Response)malloc(sizeof(HttpResponse));
    if (res) {
        res->status_code = status_code;
        res->body = body ? strdup(body) : NULL;
    }
    return res;
}

static inline Response create_response() {
    return create_response_with_params(0, NULL);
}

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

#ifdef _WIN32 
extern __declspec(dllexport) void RegisterHandler(char* path, HttpHandler handler);
extern __declspec(dllexport) char* GetMethod(HttpRequest* req);
extern __declspec(dllexport) char* GetPath(HttpRequest* req);
extern __declspec(dllexport) char* GetBody(HttpRequest* req);
extern __declspec(dllexport) char* GetClientIP(HttpRequest* req);
extern __declspec(dllexport) char* GetHeaders(HttpRequest* req);
extern __declspec(dllexport) char* GetHeaderValue(HttpRequest* req, char* key);
extern __declspec(dllexport) char* GetUsername(HttpRequest* req);
extern __declspec(dllexport) char* GetPassword(HttpRequest* req);
extern __declspec(dllexport) char* GetBearerToken(HttpRequest* req);
extern __declspec(dllexport) HttpResponse* CreateResponse(int statusCode, char* body);
extern __declspec(dllexport) int AddToWhitelist(char* ip);
extern __declspec(dllexport) int RemoveFromWhitelist(char* ip);
extern __declspec(dllexport) int AddToBlacklist(char* ip);
extern __declspec(dllexport) int RemoveFromBlacklist(char* ip);
extern __declspec(dllexport) int IsWhitelisted(char* ip);
extern __declspec(dllexport) int IsBlacklisted(char* ip);
extern __declspec(dllexport) void StartServer(char* port, int enableFilter, char* certFile, char* keyFile);
extern __declspec(dllexport) void LoadWhitelist(char* ips);
extern __declspec(dllexport) void LoadBlacklist(char* ips);
extern __declspec(dllexport) void SetTokenSecretKey(char* key);
extern __declspec(dllexport) void SetDefaultTokenExpiry(int seconds);
extern __declspec(dllexport) char* GenerateToken();
extern __declspec(dllexport) int ValidateToken(char* token);
extern __declspec(dllexport) void InvalidateToken(char* token);
extern __declspec(dllexport) time_t GetTokenExpiration(char* token);
extern __declspec(dllexport) int SetTokenExpiration(char* token, time_t expiration);
extern __declspec(dllexport) int CleanExpiredTokens();
extern __declspec(dllexport) TokenInfo* GetTokenInfo(char* token);
extern __declspec(dllexport) void FreeTokenInfo(TokenInfo* info);
extern __declspec(dllexport) int IsTokenValid(char* token);
extern __declspec(dllexport) double GetTokenRemainingTime(char* token);
#else
extern void RegisterHandler(char* path, HttpHandler handler);
extern char* GetMethod(HttpRequest* req);
extern char* GetPath(HttpRequest* req);
extern char* GetBody(HttpRequest* req);
extern char* GetClientIP(HttpRequest* req);
extern char* GetHeaders(HttpRequest* req);
extern char* GetHeaderValue(HttpRequest* req, char* key);
extern char* GetUsername(HttpRequest* req);
extern char* GetPassword(HttpRequest* req);
extern char* GetBearerToken(HttpRequest* req);
extern HttpResponse* CreateResponse(int statusCode, char* body);
extern int AddToWhitelist(char* ip);
extern int RemoveFromWhitelist(char* ip);
extern int AddToBlacklist(char* ip);
extern int RemoveFromBlacklist(char* ip);
extern int IsWhitelisted(char* ip);
extern int IsBlacklisted(char* ip);
extern void StartServer(char* port, int enableFilter, char* certFile, char* keyFile);
extern void LoadWhitelist(char* ips);
extern void LoadBlacklist(char* ips);
extern void SetTokenSecretKey(char* key);
extern void SetDefaultTokenExpiry(int seconds);
extern char* GenerateToken();
extern int ValidateToken(char* token);
extern void InvalidateToken(char* token);
extern time_t GetTokenExpiration(char* token);
extern int SetTokenExpiration(char* token, time_t expiration);
extern int CleanExpiredTokens();
extern TokenInfo* GetTokenInfo(char* token);
extern void FreeTokenInfo(TokenInfo* info);
extern int IsTokenValid(char* token);
extern double GetTokenRemainingTime(char* token);
#endif

#ifdef __cplusplus
}
#endif
